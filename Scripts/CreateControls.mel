global proc MasterControlCreator ()
{
    window  -title "Master Control Creator" -widthHeight 500 200;
        frameLayout -label "Control Parameters" -collapsable true; 
            rowLayout -numberOfColumns 3;
                columnLayout;
                    text -label "DO NOT USE YET";

			        // create the first radio collection
                    $radio1 = `radioCollection`;
                        // add some radio buttons to the collection
                        radioButton -label "Circle" -onCommand "print($circular)";
                        radioButton -label "Star";
                        radioButton -label "Square";

                setParent ..;
                
                separator -style "single" -width 50 -horizontal 0;

                columnLayout;
                    // Parameters for making custom color palette.
                    $maxOverrideColors = 32;
                    $formOffset = 2;
                    $columns = $maxOverrideColors / 2;
                    $rows = 2;
                    $cellWidth = 17;
                    $cellHeight = 17;

                    text -label "Select Color";
                    
                    // Create a color palette with all of the available override colors
                    $colorPalette = `palettePort -dimensions $columns $rows
                                                -transparent 0
                                                -width ($columns * $cellWidth)
                                                -height ($rows * $cellHeight)
                                                -topDown 1
                                                -colorEditable 0
                                                myPalette`;

                    for ($index = 1; $index < $maxOverrideColors; ++$index) 
                    {
                        $colorComponent = `colorIndex -q $index`;
                        palettePort -e -rgbValue $index $colorComponent[0] $colorComponent[1] $colorComponent[2] $colorPalette;
                    }
        
                    palettePort -e -rgbValue 0 0.6 0.6 0.6 $colorPalette;
                setParent;
            setParent ..;
        setParent ..;
        
        frameLayout -label "Execute" -collapsable false;
            rowLayout -numberOfColumns 3;
                button -label "Create Circle Controls" -command "CreateCircleControls";
                button -label "Create Square Controls" -command "CreateSquareControls";
                button -label "Color Controls" -command "Colorizer";
            setParent ..;
        setParent ..;
    showWindow;
}

proc CreateCircleControls ()
{
    string $sels[] = `ls -sl`;
    int $colorRGB = `palettePort -q -setCurCell myPalette`;

    if (size($sels) != 0)
    {
        for ($sel in $sels)
        {
            string $ctrls[] = `circle -name ($sel + "_Ctrl")`;
            string $ctrl = $ctrls[0];

            //string $grps[] = `group -name ($sel + "_Ctrl_Grp")`;
            string $grp = `group -name ($sel + "_Ctrl_Grp")`;

            ColorControl($ctrl, $colorRGB);

            matchTransform $grp $sel;
        }
    }
    else
    {
            string $ctrls[] = `circle `;
            string $ctrl = $ctrls[0];

            //string $grps[] = `group`;
            string $grp = `group`;

            ColorControl($ctrl, $colorRGB);
    }
}

proc CreateSquareControls ()
{
    string $sels[] = `ls -sl`;
    int $colorRGB = `palettePort -q -setCurCell myPalette`;

    if (size($sels) != 0)
    {
        for ($sel in $sels)
        {
            string $ctrls[] = `nurbsSquare -name ($sel + "_Ctrl")`;
            string $ctrl = $ctrls[0];

            //string $grps[] = `group -name ($sel + "_Ctrl_Grp")`;
            string $grp = `group -name ($sel + "_Ctrl_Grp")`;

            ColorControl($ctrl, $colorRGB);

            matchTransform $grp $sel;
        }
    }
    else
    {
            string $ctrls[] = `nurbsSquare`;
            string $ctrl = $ctrls[0];

            //string $grps[] = `group`;
            string $grp = `group`;

            ColorControl($ctrl, $colorRGB);
    }
}

proc CreateStarControls ()
{
    string $sels[] = `ls -sl`;
    int $colorRGB = `palettePort -q -setCurCell myPalette`;

    if (size($sels) != 0)
    {
        for ($sel in $sels)
        {
            string $ctrls[] = `circle -name ($sel + "_Ctrl")`;
            string $ctrl = $ctrls[0];

            string $grps[] = `group -name ($sel + "_Ctrl_Grp")`;
            string $grp = $grps[0];

            ColorControl($ctrl, $colorRGB);

            matchTransform $grp $sel;
        }
    }
    else
    {
            string $ctrls[] = `circle `;
            string $ctrl = $ctrls[0];

            string $grps[] = `group`;
            string $grp = $grps[0];

            ColorControl($ctrl, $colorRGB);
    }
}


global proc Colorizer()
{
    string $ctrls[];
    
    $ctrls = `ls -sl`;

    int $colorRGB = `palettePort -q -setCurCell myPalette`;

    for ($ctrl in $ctrls)
    {
        ColorControl($ctrl, $colorRGB);
    }
}

global proc ColorControl(string $ctrl, int $color)
{
    // This scripts sets the color of controls   

    //define string array for shapes
    string $shapes[];

    //setAttr "nurbsCircleShape2.overrideEnabled" 1;
    // Find the shape node on control
    $shapes = `listRelatives -shapes $ctrl`;

    for ($shape in $shapes)
    {
        if (`nodeType $shape` == "nurbsCurve")
        {
            // enable override on $Ctrl shape
            setAttr ($shape + ".overrideEnabled") 1;

            // set shape color on $Ctrl to $color
            setAttr ($shape + ".overrideColor") $color;
        }
        else
        {
            warning("Selected object is not a curve.");
        }
    }

}

/*
global proc string CenterLocator ()
{
    // Assign selection to an array
    string $sels[] = `ls -sl`;
    // Duplicating the selection as a temp object
    // and assigning to new array
    string $temp[] = `duplicate -rr $sels`;

    // Check whether more than one object in sels
    if (size($temp) > 1)
    {
        $temp = `polyUnite $temp`;
    }

    float $bbPos[];
    $bbPos = `xform -q -boundingBox $temp`;
    delete -constructionHistory $temp[0];
    delete $temp[0];

    float $xPos, $yPos, $xPos;
    $xPos = ($bbPos[0] + $bbPos[3]) / 2;
    $yPos = ($bbPos[1] + $bbPos[4]) / 2;
    $zPos = ($bbPos[2] + $bbPos[5]) / 2;

    string $loc[] = `spaceLocator - name "TempLocator" -position 0 0 0`;
    xform -translation $xPos $yPos $zPos - worldSpace -absolute $loc[0];

    //return $loc[0];
}
*/